dnl  configure.in for linux strongSwan
dnl  Copyright (C) 2006 Martin Willi
dnl  Hochschule fuer Technik Rapperswil
dnl
dnl  This program is free software; you can redistribute it and/or modify it
dnl  under the terms of the GNU General Public License as published by the
dnl  Free Software Foundation; either version 2 of the License, or (at your
dnl  option) any later version.  See <http://www.fsf.org/copyleft/gpl.txt>.
dnl
dnl  This program is distributed in the hope that it will be useful, but
dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
dnl  for more details.

dnl ===========================
dnl  initialize & set some vars
dnl ===========================

AC_INIT(strongSwan,4.5.2)
AM_INIT_AUTOMAKE(tar-ustar)
AC_CONFIG_MACRO_DIR([m4/config])
PKG_PROG_PKG_CONFIG

dnl =================================
dnl  check --enable-xxx & --with-xxx
dnl =================================

m4_include(m4/macros/with.m4)

ARG_WITH_SUBST([default-pkcs11],     [/usr/lib/opensc-pkcs11.so], [set the default PKCS11 library])
ARG_WITH_SUBST([random-device],      [/dev/random], [set the device to read real random data from])
ARG_WITH_SUBST([urandom-device],     [/dev/urandom], [set the device to read pseudo random data from])
ARG_WITH_SUBST([strongswan-conf],    [${sysconfdir}/strongswan.conf], [set the strongswan.conf file location])
ARG_WITH_SUBST([resolv-conf],        [${sysconfdir}/resolv.conf], [set the file to use in DNS handler plugin])
ARG_WITH_SUBST([piddir],             [/var/run], [set path for PID and UNIX socket files])
ARG_WITH_SUBST([ipsecdir],           [${libexecdir%/}/ipsec], [set installation path for ipsec tools])
ARG_WITH_SUBST([plugindir],          [${ipsecdir%/}/plugins], [set the installation path of plugins])
ARG_WITH_SUBST([nm-ca-dir],          [/usr/share/ca-certificates], [directory the NM plugin uses to look up trusted root certificates])
ARG_WITH_SUBST([linux-headers],      [\${top_srcdir}/src/include], [set directory of linux header files to use])
ARG_WITH_SUBST([routing-table],      [220], [set routing table to use for IPsec routes])
ARG_WITH_SUBST([routing-table-prio], [220], [set priority for IPsec routing table])

ARG_WITH_SET([capabilities],         [no], [set capability dropping library. Currently supported values are "libcap" and "native"])
ARG_WITH_SET([mpz_powm_sec],         [yes], [use the more side-channel resistant mpz_powm_sec in libgmp, if available])

if test -n "$PKG_CONFIG"; then
	systemdsystemunitdir_default=$($PKG_CONFIG --variable=systemdsystemunitdir systemd)
fi
ARG_WITH_SET([systemdsystemunitdir], [$systemdsystemunitdir_default], [directory for systemd service files])
AM_CONDITIONAL(HAVE_SYSTEMD, [test -n "$systemdsystemunitdir" -a "x$systemdsystemunitdir" != xno])
AC_SUBST(systemdsystemunitdir)

AC_ARG_WITH(
	[xauth-module],
	AS_HELP_STRING([--with-xauth-module=lib],[set the path to the XAUTH module]),
	[AC_DEFINE_UNQUOTED(XAUTH_DEFAULT_LIB, "$withval")],
)

AC_ARG_WITH(
	[user],
	AS_HELP_STRING([--with-user=user],[change user of the daemons to "user" after startup (default is "root").]),
	[AC_DEFINE_UNQUOTED(IPSEC_USER, "$withval") AC_SUBST(ipsecuser, "$withval")],
	[AC_SUBST(ipsecuser, "root")]
)

AC_ARG_WITH(
	[group],
	AS_HELP_STRING([--with-group=group],[change group of the daemons to "group" after startup (default is "root").]),
	[AC_DEFINE_UNQUOTED(IPSEC_GROUP, "$withval") AC_SUBST(ipsecgroup, "$withval")],
	[AC_SUBST(ipsecgroup, "root")]
)

m4_include(m4/macros/enable-disable.m4)

ARG_ENABL_SET([curl],           [enable CURL fetcher plugin to fetch files via libcurl. Requires libcurl.])
ARG_ENABL_SET([soup],           [enable soup fetcher plugin to fetch from HTTP via libsoup. Requires libsoup.])
ARG_ENABL_SET([ldap],           [enable LDAP fetching plugin to fetch files via libldap. Requires openLDAP.])
ARG_DISBL_SET([aes],            [disable AES software implementation plugin.])
ARG_DISBL_SET([des],            [disable DES/3DES software implementation plugin.])
ARG_ENABL_SET([blowfish],       [enable Blowfish software implementation plugin.])
ARG_ENABL_SET([md4],            [enable MD4 software implementation plugin.])
ARG_DISBL_SET([md5],            [disable MD5 software implementation plugin.])
ARG_DISBL_SET([sha1],           [disable SHA1 software implementation plugin.])
ARG_DISBL_SET([sha2],           [disable SHA256/SHA384/SHA512 software implementation plugin.])
ARG_DISBL_SET([fips-prf],       [disable FIPS PRF software implementation plugin.])
ARG_DISBL_SET([gmp],            [disable GNU MP (libgmp) based crypto implementation plugin.])
ARG_DISBL_SET([random],         [disable RNG implementation on top of /dev/(u)random.])
ARG_DISBL_SET([x509],           [disable X509 certificate implementation plugin.])
ARG_DISBL_SET([revocation],     [disable X509 CRL/OCSP revocation check plugin.])
ARG_DISBL_SET([constraints],    [disable advanced X509 constraint checking plugin.])
ARG_DISBL_SET([pubkey],         [disable RAW public key support plugin.])
ARG_DISBL_SET([pkcs1],          [disable PKCS1 key decoding plugin.])
ARG_DISBL_SET([pgp],            [disable PGP key decoding plugin.])
ARG_DISBL_SET([dnskey],         [disable DNS RR key decoding plugin.])
ARG_DISBL_SET([pem],            [disable PEM decoding plugin.])
ARG_DISBL_SET([hmac],           [disable HMAC crypto implementation plugin.])
ARG_DISBL_SET([xcbc],           [disable xcbc crypto implementation plugin.])
ARG_ENABL_SET([af-alg],         [enable AF_ALG crypto interface to Linux Crypto API.])
ARG_ENABL_SET([test-vectors],   [enable plugin providing crypto test vectors.])
ARG_ENABL_SET([mysql],          [enable MySQL database support. Requires libmysqlclient_r.])
ARG_ENABL_SET([sqlite],         [enable SQLite database support. Requires libsqlite3.])
ARG_DISBL_SET([stroke],         [disable charons stroke (pluto compatibility) configuration backend.])
ARG_ENABL_SET([medsrv],         [enable mediation server web frontend and daemon plugin.])
ARG_ENABL_SET([medcli],         [enable mediation client configuration database plugin.])
ARG_ENABL_SET([smp],            [enable SMP configuration and control interface. Requires libxml.])
ARG_ENABL_SET([sql],            [enable SQL database configuration backend.])
ARG_ENABL_SET([smartcard],      [enable smartcard support.])
ARG_ENABL_SET([cisco-quirks],   [enable support of Cisco VPN client.])
ARG_ENABL_SET([leak-detective], [enable malloc hooks to find memory leaks.])
ARG_ENABL_SET([lock-profiler],  [enable lock/mutex profiling code.])
ARG_ENABL_SET([unit-tests],     [enable unit tests on IKEv2 daemon startup.])
ARG_ENABL_SET([load-tester],    [enable load testing plugin for IKEv2 daemon.])
ARG_ENABL_SET([eap-sim],        [enable SIM authentication module for EAP.])
ARG_ENABL_SET([eap-sim-file],   [enable EAP-SIM backend based on a triplet file.])
ARG_ENABL_SET([eap-sim-pcsc],   [enable EAP-SIM backend based on a smartcard reader. Requires libpcsclite.])
ARG_ENABL_SET([eap-simaka-sql], [enable EAP-SIM/AKA backend based on a triplet/quintuplet SQL database.])
ARG_ENABL_SET([eap-simaka-pseudonym], [enable EAP-SIM/AKA pseudonym storage plugin.])
ARG_ENABL_SET([eap-simaka-reauth],    [enable EAP-SIM/AKA reauthentication data storage plugin.])
ARG_ENABL_SET([eap-identity],   [enable EAP module providing EAP-Identity helper.])
ARG_ENABL_SET([eap-md5],        [enable EAP MD5 (CHAP) authentication module.])
ARG_ENABL_SET([eap-gtc],        [enable PAM based EAP GTC authentication module.])
ARG_ENABL_SET([eap-aka],        [enable EAP AKA authentication module.])
ARG_ENABL_SET([eap-aka-3gpp2],  [enable EAP AKA backend implementing 3GPP2 algorithms in software. Requires libgmp.])
ARG_ENABL_SET([eap-mschapv2],   [enable EAP MS-CHAPv2 authentication module.])
ARG_ENABL_SET([eap-tls],        [enable EAP TLS authentication module.])
ARG_ENABL_SET([eap-ttls],       [enable EAP TTLS authentication module.])
ARG_ENABL_SET([eap-peap],       [enable EAP PEAP authentication module.])
ARG_ENABL_SET([eap-tnc],        [enable EAP TNC trusted network connect module.])
ARG_ENABL_SET([eap-radius],     [enable RADIUS proxy authentication module.])
ARG_ENABL_SET([tnc-imc],        [enable TNC IMC module.])
ARG_ENABL_SET([tnc-imv],        [enable TNC IMV module.])
ARG_ENABL_SET([tnccs-11],       [enable TNCCS 1.1 protocol module.])
ARG_ENABL_SET([tnccs-20],       [enable TNCCS 2.0 protocol module.])
ARG_ENABL_SET([tnccs-dynamic],  [enable dynamic TNCCS protocol discovery module.])
ARG_DISBL_SET([kernel-netlink], [disable the netlink kernel interface.])
ARG_ENABL_SET([kernel-pfkey],   [enable the PF_KEY kernel interface.])
ARG_ENABL_SET([kernel-pfroute], [enable the PF_ROUTE kernel interface.])
ARG_ENABL_SET([kernel-klips],   [enable the KLIPS kernel interface.])
ARG_DISBL_SET([socket-default], [disable default socket implementation for charon.])
ARG_ENABL_SET([socket-raw],     [enable raw socket implementation of charon, enforced if pluto is enabled])
ARG_ENABL_SET([socket-dynamic], [enable dynamic socket implementation for charon])
ARG_ENABL_SET([farp],           [enable ARP faking plugin that responds to ARP requests to peers virtual IP])
ARG_ENABL_SET([nat-transport],  [enable NAT traversal with IPsec transport mode in pluto.])
ARG_DISBL_SET([vendor-id],      [disable the sending of the strongSwan vendor ID in pluto.])
ARG_DISBL_SET([xauth-vid],      [disable the sending of the XAUTH vendor ID.])
ARG_ENABL_SET([dumm],           [enable the DUMM UML test framework.])
ARG_ENABL_SET([fast],           [enable libfast (FastCGI Application Server w/ templates.])
ARG_ENABL_SET([manager],        [enable web management console (proof of concept).])
ARG_ENABL_SET([mediation],      [enable IKEv2 Mediation Extension.])
ARG_ENABL_SET([integrity-test], [enable integrity testing of libstrongswan and plugins.])
ARG_DISBL_SET([load-warning],   [disable the charon/pluto plugin load option warning in starter.])
ARG_DISBL_SET([pluto],          [disable the IKEv1 keying daemon pluto.])
ARG_DISBL_SET([xauth],          [disable xauth plugin.])
ARG_DISBL_SET([threads],        [disable the use of threads in pluto. Charon always uses threads.])
ARG_DISBL_SET([charon],         [disable the IKEv2 keying daemon charon.])
ARG_DISBL_SET([tools],          [disable additional utilities (openac, scepclient and pki).])
ARG_DISBL_SET([scripts],        [disable additional utilities (found in directory scripts).])
ARG_ENABL_SET([conftest],       [enforce Suite B conformance test framework.])
ARG_DISBL_SET([updown],         [disable updown firewall script plugin.])
ARG_DISBL_SET([attr],           [disable strongswan.conf based configuration attribute plugin.])
ARG_ENABL_SET([attr-sql],       [enable SQL based configuration attribute plugin.])
ARG_ENABL_SET([dhcp],           [enable DHCP based attribute provider plugin.])
ARG_DISBL_SET([resolve],        [disable resolve DNS handler plugin.])
ARG_ENABL_SET([padlock],        [enables VIA Padlock crypto plugin.])
ARG_ENABL_SET([openssl],        [enables the OpenSSL crypto plugin.])
ARG_ENABL_SET([gcrypt],         [enables the libgcrypt plugin.])
ARG_ENABL_SET([agent],          [enables the ssh-agent signing plugin.])
ARG_ENABL_SET([pkcs11],         [enables the PKCS11 token support plugin.])
ARG_ENABL_SET([ctr],            [enables the Counter Mode wrapper crypto plugin.])
ARG_ENABL_SET([ccm],            [enables the CCM AEAD wrapper crypto plugin.])
ARG_ENABL_SET([gcm],            [enables the GCM AEAD wrapper crypto plugin.])
ARG_ENABL_SET([addrblock],      [enables RFC 3779 address block constraint support.])
ARG_ENABL_SET([uci],            [enable OpenWRT UCI configuration plugin.])
ARG_ENABL_SET([android],        [enable Android specific plugin.])
ARG_ENABL_SET([maemo],          [enable Maemo specific plugin.])
ARG_ENABL_SET([nm],             [enable NetworkManager plugin.])
ARG_ENABL_SET([ha],             [enable high availability cluster plugin.])
ARG_ENABL_SET([whitelist],      [enable peer identity whitelisting plugin.])
ARG_ENABL_SET([led],            [enable plugin to control LEDs on IKEv2 activity using the Linux kernel LED subsystem.])
ARG_ENABL_SET([duplicheck],     [advanced duplicate checking plugin using liveness checks.])
ARG_ENABL_SET([coupling],       [enable IKEv2 plugin to couple peer certificates permanently to authentication.])
ARG_ENABL_SET([vstr],           [enforce using the Vstr string library to replace glibc-like printf hooks.])
ARG_ENABL_SET([monolithic],     [build monolithic version of libstrongswan that includes all enabled plugins. Similarly, the plugins of charon are assembled in libcharon.])

dnl =========================
dnl  set up compiler and flags
dnl =========================

if test -z "$CFLAGS"; then
	CFLAGS="-g -O2 -Wall -Wno-format -Wno-pointer-sign -Wno-strict-aliasing"
fi
AC_PROG_CC
AC_LIB_PREFIX
AC_C_BIGENDIAN

dnl =========================
dnl  check required programs
dnl =========================

AC_PROG_INSTALL
AC_PROG_LIBTOOL
AC_PROG_EGREP
AC_PROG_AWK
AC_PROG_LEX
AC_PROG_YACC
AC_PATH_PROG([PERL], [perl], [], [$PATH:/bin:/usr/bin:/usr/local/bin])
AC_PATH_PROG([GPERF], [gperf], [], [$PATH:/bin:/usr/bin:/usr/local/bin])

dnl because gperf is not needed by end-users we just report it but do not abort on failure
AC_MSG_CHECKING([gperf version >= 3.0.0])
if test -x "$GPERF"; then
	if test "`$GPERF --version | $AWK -F' ' '/^GNU gperf/ { print $3 }' | $AWK -F. '{ print $1 }'`" -ge "3"; then
		AC_MSG_RESULT([yes])
	else
		AC_MSG_RESULT([no])
	fi
else
	AC_MSG_RESULT([not found])
fi

dnl =========================
dnl  dependency calculation
dnl =========================

if test x$eap_aka_3gpp2 = xtrue; then
	gmp=true;
fi

if test x$eap_aka = xtrue; then
	fips_prf=true;
	simaka=true;
fi

if test x$eap_sim = xtrue; then
	fips_prf=true;
	simaka=true;
fi

if test x$eap_tls = xtrue -o x$eap_ttls = xtrue -o x$eap_peap = xtrue; then
	tls=true;
fi

if test x$fips_prf = xtrue; then
	if test x$openssl = xfalse; then
		sha1=true;
	fi
fi

if test x$smp = xtrue -o x$tnccs_11 = xtrue; then
	xml=true
fi

if test x$manager = xtrue; then
	fast=true
fi

if test x$medsrv = xtrue; then
	mediation=true
	fast=true
fi

if test x$medcli = xtrue; then
	mediation=true
fi

if test x$pluto = xtrue; then
	if test x$socket_raw = xfalse; then
		AC_MSG_NOTICE([Enforcing --enable-socket-raw, as pluto is enabled])
		socket_raw=true
		if test x$socket_default_given = xfalse; then
			socket_default=false
		fi
	fi
fi

dnl ===========================================
dnl  check required libraries and header files
dnl ===========================================

AC_HEADER_STDBOOL
AC_FUNC_ALLOCA

dnl libraries needed on some platforms but not on others
dnl ====================================================
saved_LIBS=$LIBS

dnl FreeBSD and Mac OS X have dlopen integrated in libc, Linux needs libdl
LIBS=""
AC_SEARCH_LIBS(dlopen, dl, [DLLIB=$LIBS])
AC_SUBST(DLLIB)

dnl glibc's backtrace() can be replicated on FreeBSD with libexecinfo
LIBS=""
AC_SEARCH_LIBS(backtrace, execinfo, [BTLIB=$LIBS])
AC_CHECK_FUNCS(backtrace)
AC_SUBST(BTLIB)

dnl OpenSolaris needs libsocket and libnsl for socket()
LIBS=""
AC_SEARCH_LIBS(socket, socket, [SOCKLIB=$LIBS],
	[AC_CHECK_LIB(nsl, socket, [SOCKLIB="-lsocket -lnsl"], [], [-lsocket])]
)
AC_SUBST(SOCKLIB)

dnl FreeBSD has clock_gettime in libc, Linux needs librt
LIBS=""
AC_SEARCH_LIBS(clock_gettime, rt, [RTLIB=$LIBS])
AC_CHECK_FUNCS(clock_gettime)
AC_SUBST(RTLIB)

dnl Android has pthread_* functions in bionic (libc), others need libpthread
LIBS=""
AC_SEARCH_LIBS(pthread_create, pthread, [PTHREADLIB=$LIBS])
AC_SUBST(PTHREADLIB)

LIBS=$saved_LIBS
dnl ======================

AC_MSG_CHECKING(for dladdr)
AC_TRY_COMPILE(
	[#define _GNU_SOURCE
	 #include <dlfcn.h>],
	[Dl_info* info = 0;
	 dladdr(0, info);],
	[AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_DLADDR])],
	[AC_MSG_RESULT([no])]
)

dnl check if pthread_condattr_setclock(CLOCK_MONOTONE) is supported
saved_LIBS=$LIBS
LIBS=$PTHREADLIB
AC_MSG_CHECKING([for pthread_condattr_setclock(CLOCK_MONOTONE)])
AC_TRY_RUN(
	[#include <pthread.h>
	 int main() { pthread_condattr_t attr;
		pthread_condattr_init(&attr);
		return pthread_condattr_setclock(&attr, CLOCK_MONOTONIC);}],
	[AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_CONDATTR_CLOCK_MONOTONIC])],
	[AC_MSG_RESULT([no])],
	dnl Check existence of pthread_condattr_setclock if cross-compiling
	[AC_MSG_RESULT([unknown]);
	 AC_CHECK_FUNCS(pthread_condattr_setclock,
		[AC_DEFINE([HAVE_CONDATTR_CLOCK_MONOTONIC])]
	)]
)
dnl check if we actually are able to configure attributes on cond vars
AC_CHECK_FUNCS(pthread_condattr_init)
dnl instead of pthread_condattr_setclock Android has this function
AC_CHECK_FUNCS(pthread_cond_timedwait_monotonic)
dnl check if we can cancel threads
AC_CHECK_FUNCS(pthread_cancel)
dnl check if native rwlocks are available
AC_CHECK_FUNCS(pthread_rwlock_init)
LIBS=$saved_LIBS

AC_CHECK_FUNCS(prctl)

AC_CHECK_FUNCS(mallinfo)

AC_CHECK_HEADERS(sys/sockio.h glob.h)
AC_CHECK_HEADERS(net/pfkeyv2.h netipsec/ipsec.h netinet6/ipsec.h linux/udp.h)

AC_CHECK_MEMBERS([struct sockaddr.sa_len], [], [],
[
	#include <sys/types.h>
	#include <sys/socket.h>
])

AC_CHECK_MEMBERS([struct sadb_x_policy.sadb_x_policy_priority], [], [],
[
	#include <sys/types.h>
	#ifdef HAVE_NET_PFKEYV2_H
	#include <net/pfkeyv2.h>
	#else
	#include <stdint.h>
	#include <linux/pfkeyv2.h>
	#endif
])

AC_MSG_CHECKING([for in6addr_any])
AC_TRY_COMPILE(
	[#include <sys/types.h>
	#include <sys/socket.h>
	#include <netinet/in.h>],
	[struct in6_addr in6;
	in6 = in6addr_any;],
	[AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_IN6ADDR_ANY])],
	[AC_MSG_RESULT([no])]
)

AC_MSG_CHECKING([for in6_pktinfo])
AC_TRY_COMPILE(
	[#define _GNU_SOURCE
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netinet/in.h>],
	[struct in6_pktinfo pi;
	if (pi.ipi6_ifindex)
	{
		return 0;
	}],
	[AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_IN6_PKTINFO])],
	[AC_MSG_RESULT([no])]
)

AC_MSG_CHECKING([for IPSEC_MODE_BEET])
AC_TRY_COMPILE(
	[#include <sys/types.h>
	#ifdef HAVE_NETIPSEC_IPSEC_H
	#include <netipsec/ipsec.h>
	#elif defined(HAVE_NETINET6_IPSEC_H)
	#include <netinet6/ipsec.h>
	#else
	#include <stdint.h>
	#include <linux/ipsec.h>
	#endif],
	[int mode = IPSEC_MODE_BEET;
	 return mode;],
	[AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_IPSEC_MODE_BEET])],
	[AC_MSG_RESULT([no])]
)

AC_MSG_CHECKING([for IPSEC_DIR_FWD])
AC_TRY_COMPILE(
	[#include <sys/types.h>
	#ifdef HAVE_NETIPSEC_IPSEC_H
	#include <netipsec/ipsec.h>
	#elif defined(HAVE_NETINET6_IPSEC_H)
	#include <netinet6/ipsec.h>
	#else
	#include <stdint.h>
	#include <linux/ipsec.h>
	#endif],
	[int dir = IPSEC_DIR_FWD;
	 return dir;],
	[AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_IPSEC_DIR_FWD])],
	[AC_MSG_RESULT([no])]
)

AC_MSG_CHECKING([for gcc atomic operations])
AC_TRY_RUN(
[
	int main() {
		volatile int ref = 1;
		__sync_fetch_and_add (&ref, 1);
		__sync_sub_and_fetch (&ref, 1);
		/* Make sure test fails if operations are not supported */
		__sync_val_compare_and_swap(&ref, 1, 0);
		return ref;
	}
],
[AC_MSG_RESULT([yes]); AC_DEFINE(HAVE_GCC_ATOMIC_OPERATIONS)],
[AC_MSG_RESULT([no])],
[AC_MSG_RESULT([no])])

dnl check for the new register_printf_specifier function with len argument,
dnl or the deprecated register_printf_function without
AC_CHECK_FUNC(
	[register_printf_specifier],
	[AC_DEFINE(HAVE_PRINTF_SPECIFIER)],
	[AC_CHECK_FUNC(
		[register_printf_function],
		[AC_DEFINE(HAVE_PRINTF_FUNCTION)],
		[
			AC_MSG_NOTICE([printf does not support custom format specifiers!])
			vstr=true
		]
	)]
)

if test x$vstr = xtrue; then
	AC_HAVE_LIBRARY([vstr],[LIBS="$LIBS"],[AC_MSG_ERROR([Vstr string library not found])])
	AC_DEFINE(USE_VSTR)
fi

if test x$gmp = xtrue; then
	saved_LIBS=$LIBS
	AC_HAVE_LIBRARY([gmp],,[AC_MSG_ERROR([GNU Multi Precision library gmp not found])])
	AC_MSG_CHECKING([mpz_powm_sec])
	if test x$mpz_powm_sec = xyes; then
		AC_TRY_COMPILE(
			[#include "gmp.h"],
			[
				void *x = mpz_powm_sec;
			],
			[AC_MSG_RESULT([yes]); AC_DEFINE(HAVE_MPZ_POWM_SEC)], [AC_MSG_RESULT([no])]
		)
	else
		AC_MSG_RESULT([disabled])
	fi
	LIBS=$saved_LIBS
	AC_MSG_CHECKING([gmp.h version >= 4.1.4])
	AC_TRY_COMPILE(
		[#include "gmp.h"],
		[
			#if (__GNU_MP_VERSION*100 +  __GNU_MP_VERSION_MINOR*10 + __GNU_MP_VERSION_PATCHLEVEL) < 414
				#error bad gmp
			#endif
		],
		[AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no]); AC_MSG_ERROR([No usable gmp.h found!])]
	)
fi

if test x$ldap = xtrue; then
	AC_HAVE_LIBRARY([ldap],[LIBS="$LIBS"],[AC_MSG_ERROR([LDAP library ldap not found])])
	AC_HAVE_LIBRARY([lber],[LIBS="$LIBS"],[AC_MSG_ERROR([LDAP library lber not found])])
	AC_CHECK_HEADER([ldap.h],,[AC_MSG_ERROR([LDAP header ldap.h not found!])])
fi

if test x$curl = xtrue; then
	AC_HAVE_LIBRARY([curl],[LIBS="$LIBS"],[AC_MSG_ERROR([CURL library curl not found])])
	AC_CHECK_HEADER([curl/curl.h],,[AC_MSG_ERROR([CURL header curl/curl.h not found!])])
fi

if test x$soup = xtrue; then
	PKG_CHECK_MODULES(soup, [libsoup-2.4])
	AC_SUBST(soup_CFLAGS)
	AC_SUBST(soup_LIBS)
fi

if test x$xml = xtrue; then
	PKG_CHECK_MODULES(xml, [libxml-2.0])
	AC_SUBST(xml_CFLAGS)
	AC_SUBST(xml_LIBS)
fi

if test x$dumm = xtrue; then
	PKG_CHECK_MODULES(gtk, [gtk+-2.0 vte])
	AC_SUBST(gtk_CFLAGS)
	AC_SUBST(gtk_LIBS)
	AC_CHECK_PROGS(RUBY, ruby)
	AC_MSG_CHECKING([for Ruby header files])
	if test -n "$RUBY"; then
		RUBYDIR=`($RUBY -rmkmf -e 'print Config::CONFIG[["archdir"]] || $archdir') 2>/dev/null`
		if test -n "$RUBYDIR"; then
			dirs="$RUBYDIR"
			RUBYINCLUDE=none
			for i in $dirs; do
				if test -r $i/ruby.h; then
					AC_MSG_RESULT([$i])
					RUBYINCLUDE="-I$i"
					break;
				fi
			done
			if test x"$RUBYINCLUDE" = xnone; then
				AC_MSG_ERROR([ruby.h not found])
			fi
			AC_SUBST(RUBYINCLUDE)
		else
			AC_MSG_ERROR([unable to determine ruby configuration])
		fi
	else
		AC_MSG_ERROR([don't know how to run ruby])
	fi
fi

if test x$fast = xtrue; then
	AC_HAVE_LIBRARY([neo_cgi],[LIBS="$LIBS"],[AC_MSG_ERROR([ClearSilver library neo_cgi not found!])])
	AC_HAVE_LIBRARY([neo_utl],[LIBS="$LIBS"],[AC_MSG_ERROR([ClearSilver library neo_utl not found!])])
	AC_HAVE_LIBRARY([z],[LIBS="$LIBS"],[AC_MSG_ERROR([ClearSilver dependency zlib not found!])])
dnl autoconf does not like CamelCase!? How to fix this?
dnl	AC_CHECK_HEADER([ClearSilver/ClearSilver.h],,[AC_MSG_ERROR([ClearSilver header file ClearSilver/ClearSilver.h not found!])])

	AC_HAVE_LIBRARY([fcgi],[LIBS="$LIBS"],[AC_MSG_ERROR([FastCGI library fcgi not found!])])
	AC_CHECK_HEADER([fcgiapp.h],,[AC_MSG_ERROR([FastCGI header file fcgiapp.h not found!])])
fi

if test x$mysql = xtrue; then
	AC_PATH_PROG([MYSQLCONFIG], [mysql_config], [], [$PATH:/bin:/usr/bin:/usr/local/bin])
	if test x$MYSQLCONFIG = x; then
		AC_MSG_ERROR([mysql_config not found!])
	fi
	AC_SUBST(MYSQLLIB, `$MYSQLCONFIG --libs_r`)
	AC_SUBST(MYSQLCFLAG, `$MYSQLCONFIG --cflags`)
fi

if test x$sqlite = xtrue; then
	AC_HAVE_LIBRARY([sqlite3],[LIBS="$LIBS"],[AC_MSG_ERROR([SQLite library sqlite3 not found])])
	AC_CHECK_HEADER([sqlite3.h],,[AC_MSG_ERROR([SQLite header sqlite3.h not found!])])
	AC_MSG_CHECKING([sqlite3_prepare_v2])
	AC_TRY_COMPILE(
		[#include <sqlite3.h>],
		[
			void *test = sqlite3_prepare_v2;
		],
		[AC_MSG_RESULT([yes])]; AC_DEFINE_UNQUOTED(HAVE_SQLITE3_PREPARE_V2, 1), [AC_MSG_RESULT([no])])
	AC_MSG_CHECKING([sqlite3.h version >= 3.3.1])
	AC_TRY_COMPILE(
		[#include <sqlite3.h>],
		[
			#if SQLITE_VERSION_NUMBER < 3003001
				#error bad sqlite
			#endif
		],
		[AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no]); AC_MSG_ERROR([SQLite version >= 3.3.1 required!])])
fi

if test x$openssl = xtrue; then
	AC_HAVE_LIBRARY([crypto],[LIBS="$LIBS"],[AC_MSG_ERROR([OpenSSL crypto library not found])])
	AC_CHECK_HEADER([openssl/evp.h],,[AC_MSG_ERROR([OpenSSL header openssl/evp.h not found!])])
fi

if test x$gcrypt = xtrue; then
	AC_HAVE_LIBRARY([gcrypt],[LIBS="$LIBS"],[AC_MSG_ERROR([gcrypt library not found])],[-lgpg-error])
	AC_CHECK_HEADER([gcrypt.h],,[AC_MSG_ERROR([gcrypt header gcrypt.h not found!])])
	AC_MSG_CHECKING([gcrypt CAMELLIA cipher])
	AC_TRY_COMPILE(
		[#include <gcrypt.h>],
		[enum gcry_cipher_algos alg = GCRY_CIPHER_CAMELLIA128;],
		[AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_GCRY_CIPHER_CAMELLIA])],
		[AC_MSG_RESULT([no])]
	)
fi

if test x$uci = xtrue; then
	AC_HAVE_LIBRARY([uci],[LIBS="$LIBS"],[AC_MSG_ERROR([UCI library libuci not found])])
	AC_CHECK_HEADER([uci.h],,[AC_MSG_ERROR([UCI header uci.h not found!])])
fi

if test x$android = xtrue; then
	AC_HAVE_LIBRARY([cutils],[LIBS="$LIBS"],[AC_MSG_ERROR([Android library libcutils not found])])
	AC_CHECK_HEADER([cutils/properties.h],,[AC_MSG_ERROR([Android header cutils/properties.h not found!])])
	dnl we have to force the use of libdl here because the autodetection
	dnl above does not work correctly when cross-compiling for android.
	DLLIB="-ldl"
	AC_SUBST(DLLIB)
fi

if test x$maemo = xtrue; then
	PKG_CHECK_MODULES(maemo, [glib-2.0 gthread-2.0 libosso osso-af-settings])
	AC_SUBST(maemo_CFLAGS)
	AC_SUBST(maemo_LIBS)
	dbusservicedir="/usr/share/dbus-1/system-services"
	AC_SUBST(dbusservicedir)
fi

if test x$eap_sim_pcsc = xtrue; then
	PKG_CHECK_MODULES(pcsclite, [libpcsclite])
	AC_SUBST(pcsclite_CFLAGS)
	AC_SUBST(pcsclite_LIBS)
fi

if test x$nm = xtrue; then
	PKG_CHECK_EXISTS([libnm-glib],
		[PKG_CHECK_MODULES(nm, [NetworkManager gthread-2.0 libnm-glib libnm-glib-vpn])],
		[PKG_CHECK_MODULES(nm, [NetworkManager gthread-2.0 libnm_glib libnm_glib_vpn])]
	)
	AC_SUBST(nm_CFLAGS)
	AC_SUBST(nm_LIBS)
fi

if test x$eap_gtc = xtrue; then
	AC_HAVE_LIBRARY([pam],[LIBS="$LIBS"],[AC_MSG_ERROR([PAM library not found])])
	AC_CHECK_HEADER([security/pam_appl.h],,[AC_MSG_ERROR([PAM header security/pam_appl.h not found!])])
fi

if test x$capabilities = xnative; then
	AC_MSG_NOTICE([Usage of the native Linux capabilities interface is deprecated, use libcap instead])
	dnl Linux requires the following for capset(), Android does not have it,
	dnl but defines capset() in unistd.h instead.
	AC_CHECK_HEADERS([sys/capability.h])
	AC_CHECK_FUNC(capset,,[AC_MSG_ERROR([capset() not found!])])
	AC_DEFINE(CAPABILITIES_NATIVE)
fi

if test x$capabilities = xlibcap; then
	AC_HAVE_LIBRARY([cap],[LIBS="$LIBS"],[AC_MSG_ERROR([libcap library not found])])
	AC_CHECK_HEADER([sys/capability.h],
		[AC_DEFINE(HAVE_SYS_CAPABILITY_H)],
		[AC_MSG_ERROR([libcap header sys/capability.h not found!])])
	AC_DEFINE(CAPABILITIES_LIBCAP)
fi

if test x$integrity_test = xtrue; then
	AC_MSG_CHECKING([for dladdr()])
	AC_TRY_COMPILE(
		[#define _GNU_SOURCE
		 #include <dlfcn.h>],
		[Dl_info info; dladdr(main, &info);],
		[AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no]);
		 AC_MSG_ERROR([dladdr() not supported, required by integrity-test!])]
	)
	AC_MSG_CHECKING([for dl_iterate_phdr()])
	AC_TRY_COMPILE(
		[#define _GNU_SOURCE
		 #include <link.h>],
		[dl_iterate_phdr((void*)0, (void*)0);],
		[AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no]);
		 AC_MSG_ERROR([dl_iterate_phdr() not supported, required by integrity-test!])]
	)
fi

dnl ==============================================
dnl  collect plugin list for strongSwan components
dnl ==============================================

m4_include(m4/macros/add-plugin.m4)

# plugin lists for all components
libcharon_plugins=
pluto_plugins=
pool_plugins=
openac_plugins=
scepclient_plugins=
pki_plugins=
scripts_plugins=
manager_plugins=
medsrv_plugins=

# location specific lists for checksumming,
# for src/libcharon, src/pluto, src/libhydra and src/libstrongswan
c_plugins=
p_plugins=
h_plugins=
s_plugins=

ADD_PLUGIN([test-vectors],         [s libcharon pluto openac scepclient pki])
ADD_PLUGIN([curl],                 [s libcharon pluto scepclient scripts])
ADD_PLUGIN([soup],                 [s libcharon pluto scripts])
ADD_PLUGIN([ldap],                 [s libcharon pluto scepclient scripts])
ADD_PLUGIN([mysql],                [s libcharon pluto pool manager medsrv])
ADD_PLUGIN([sqlite],               [s libcharon pluto pool manager medsrv])
ADD_PLUGIN([aes],                  [s libcharon pluto openac scepclient pki scripts])
ADD_PLUGIN([des],                  [s libcharon pluto openac scepclient pki scripts])
ADD_PLUGIN([blowfish],             [s libcharon pluto openac scepclient pki scripts])
ADD_PLUGIN([sha1],                 [s libcharon pluto openac scepclient pki scripts medsrv])
ADD_PLUGIN([sha2],                 [s libcharon pluto openac scepclient pki scripts medsrv])
ADD_PLUGIN([md4],                  [s libcharon openac manager scepclient pki])
ADD_PLUGIN([md5],                  [s libcharon pluto openac scepclient pki])
ADD_PLUGIN([random],               [s libcharon pluto openac scepclient pki scripts medsrv])
ADD_PLUGIN([x509],                 [s libcharon pluto openac scepclient pki scripts])
ADD_PLUGIN([revocation],           [s libcharon])
ADD_PLUGIN([constraints],          [s libcharon])
ADD_PLUGIN([pubkey],               [s libcharon])
ADD_PLUGIN([pkcs1],                [s libcharon pluto openac scepclient pki scripts manager medsrv])
ADD_PLUGIN([pgp],                  [s libcharon pluto])
ADD_PLUGIN([dnskey],               [s pluto])
ADD_PLUGIN([pem],                  [s libcharon pluto openac scepclient pki scripts manager medsrv])
ADD_PLUGIN([padlock],              [s libcharon])
ADD_PLUGIN([openssl],              [s libcharon pluto openac scepclient pki scripts manager medsrv])
ADD_PLUGIN([gcrypt],               [s libcharon pluto openac scepclient pki scripts manager medsrv])
ADD_PLUGIN([fips-prf],             [s libcharon])
ADD_PLUGIN([gmp],                  [s libcharon pluto openac scepclient pki scripts manager medsrv])
ADD_PLUGIN([agent],                [s libcharon])
ADD_PLUGIN([pkcs11],               [s libcharon pki])
ADD_PLUGIN([xcbc],                 [s libcharon])
ADD_PLUGIN([hmac],                 [s libcharon pluto scripts])
ADD_PLUGIN([ctr],                  [s libcharon scripts])
ADD_PLUGIN([ccm],                  [s libcharon scripts])
ADD_PLUGIN([gcm],                  [s libcharon scripts])
ADD_PLUGIN([af-alg],               [s libcharon pluto openac scepclient pki scripts medsrv])
ADD_PLUGIN([xauth],                [p pluto])
ADD_PLUGIN([attr],                 [h libcharon pluto])
ADD_PLUGIN([attr-sql],             [h libcharon pluto])
ADD_PLUGIN([load-tester],          [c libcharon])
ADD_PLUGIN([kernel-pfkey],         [h libcharon pluto])
ADD_PLUGIN([kernel-pfroute],       [h libcharon pluto])
ADD_PLUGIN([kernel-klips],         [h libcharon pluto])
ADD_PLUGIN([kernel-netlink],       [h libcharon pluto])
ADD_PLUGIN([resolve],              [h libcharon pluto])
ADD_PLUGIN([socket-default],       [c libcharon])
ADD_PLUGIN([socket-raw],           [c libcharon])
ADD_PLUGIN([socket-dynamic],       [c libcharon])
ADD_PLUGIN([farp],                 [c libcharon])
ADD_PLUGIN([stroke],               [c libcharon])
ADD_PLUGIN([smp],                  [c libcharon])
ADD_PLUGIN([sql],                  [c libcharon])
ADD_PLUGIN([updown],               [c libcharon])
ADD_PLUGIN([eap-identity],         [c libcharon])
ADD_PLUGIN([eap-sim],              [c libcharon])
ADD_PLUGIN([eap-sim-file],         [c libcharon])
ADD_PLUGIN([eap-sim-pcsc],         [c libcharon])
ADD_PLUGIN([eap-simaka-sql],       [c libcharon])
ADD_PLUGIN([eap-simaka-pseudonym], [c libcharon])
ADD_PLUGIN([eap-simaka-reauth],    [c libcharon])
ADD_PLUGIN([eap-aka],              [c libcharon])
ADD_PLUGIN([eap-aka-3gpp2],        [c libcharon])
ADD_PLUGIN([eap-md5],              [c libcharon])
ADD_PLUGIN([eap-gtc],              [c libcharon])
ADD_PLUGIN([eap-mschapv2],         [c libcharon])
ADD_PLUGIN([eap-radius],           [c libcharon])
ADD_PLUGIN([eap-tls],              [c libcharon])
ADD_PLUGIN([eap-ttls],             [c libcharon])
ADD_PLUGIN([eap-peap],             [c libcharon])
ADD_PLUGIN([eap-tnc],              [c libcharon])
ADD_PLUGIN([tnccs-20],             [c libcharon])
ADD_PLUGIN([tnccs-11],             [c libcharon])
ADD_PLUGIN([tnccs-dynamic],        [c libcharon])
ADD_PLUGIN([tnc-imc],              [c libcharon])
ADD_PLUGIN([tnc-imv],              [c libcharon])
ADD_PLUGIN([medsrv],               [c libcharon])
ADD_PLUGIN([medcli],               [c libcharon])
ADD_PLUGIN([nm],                   [c libcharon])
ADD_PLUGIN([dhcp],                 [c libcharon])
ADD_PLUGIN([android],              [c libcharon])
ADD_PLUGIN([ha],                   [c libcharon])
ADD_PLUGIN([whitelist],            [c libcharon])
ADD_PLUGIN([led],                  [c libcharon])
ADD_PLUGIN([duplicheck],           [c libcharon])
ADD_PLUGIN([coupling],             [c libcharon])
ADD_PLUGIN([maemo],                [c libcharon])
ADD_PLUGIN([uci],                  [c libcharon])
ADD_PLUGIN([addrblock],            [c libcharon])
ADD_PLUGIN([unit-tester],          [c libcharon])

AC_SUBST(libcharon_plugins)
AC_SUBST(pluto_plugins)
AC_SUBST(pool_plugins)
AC_SUBST(openac_plugins)
AC_SUBST(scepclient_plugins)
AC_SUBST(pki_plugins)
AC_SUBST(scripts_plugins)
AC_SUBST(manager_plugins)
AC_SUBST(medsrv_plugins)

AC_SUBST(c_plugins)
AC_SUBST(p_plugins)
AC_SUBST(h_plugins)
AC_SUBST(s_plugins)

dnl =========================
dnl  set Makefile.am vars
dnl =========================

dnl libstrongswan plugins
dnl =====================
AM_CONDITIONAL(USE_TEST_VECTORS, test x$test_vectors = xtrue)
AM_CONDITIONAL(USE_CURL, test x$curl = xtrue)
AM_CONDITIONAL(USE_SOUP, test x$soup = xtrue)
AM_CONDITIONAL(USE_LDAP, test x$ldap = xtrue)
AM_CONDITIONAL(USE_AES, test x$aes = xtrue)
AM_CONDITIONAL(USE_DES, test x$des = xtrue)
AM_CONDITIONAL(USE_BLOWFISH, test x$blowfish = xtrue)
AM_CONDITIONAL(USE_MD4, test x$md4 = xtrue)
AM_CONDITIONAL(USE_MD5, test x$md5 = xtrue)
AM_CONDITIONAL(USE_SHA1, test x$sha1 = xtrue)
AM_CONDITIONAL(USE_SHA2, test x$sha2 = xtrue)
AM_CONDITIONAL(USE_FIPS_PRF, test x$fips_prf = xtrue)
AM_CONDITIONAL(USE_GMP, test x$gmp = xtrue)
AM_CONDITIONAL(USE_RANDOM, test x$random = xtrue)
AM_CONDITIONAL(USE_X509, test x$x509 = xtrue)
AM_CONDITIONAL(USE_REVOCATION, test x$revocation = xtrue)
AM_CONDITIONAL(USE_CONSTRAINTS, test x$constraints = xtrue)
AM_CONDITIONAL(USE_PUBKEY, test x$pubkey = xtrue)
AM_CONDITIONAL(USE_PKCS1, test x$pkcs1 = xtrue)
AM_CONDITIONAL(USE_PGP, test x$pgp = xtrue)
AM_CONDITIONAL(USE_DNSKEY, test x$dnskey = xtrue)
AM_CONDITIONAL(USE_PEM, test x$pem = xtrue)
AM_CONDITIONAL(USE_HMAC, test x$hmac = xtrue)
AM_CONDITIONAL(USE_XCBC, test x$xcbc = xtrue)
AM_CONDITIONAL(USE_MYSQL, test x$mysql = xtrue)
AM_CONDITIONAL(USE_SQLITE, test x$sqlite = xtrue)
AM_CONDITIONAL(USE_PADLOCK, test x$padlock = xtrue)
AM_CONDITIONAL(USE_OPENSSL, test x$openssl = xtrue)
AM_CONDITIONAL(USE_GCRYPT, test x$gcrypt = xtrue)
AM_CONDITIONAL(USE_AGENT, test x$agent = xtrue)
AM_CONDITIONAL(USE_PKCS11, test x$pkcs11 = xtrue)
AM_CONDITIONAL(USE_CTR, test x$ctr = xtrue)
AM_CONDITIONAL(USE_CCM, test x$ccm = xtrue)
AM_CONDITIONAL(USE_GCM, test x$gcm = xtrue)
AM_CONDITIONAL(USE_AF_ALG, test x$af_alg = xtrue)

dnl charon plugins
dnl ==============
AM_CONDITIONAL(USE_STROKE, test x$stroke = xtrue)
AM_CONDITIONAL(USE_MEDSRV, test x$medsrv = xtrue)
AM_CONDITIONAL(USE_MEDCLI, test x$medcli = xtrue)
AM_CONDITIONAL(USE_NM, test x$nm = xtrue)
AM_CONDITIONAL(USE_UCI, test x$uci = xtrue)
AM_CONDITIONAL(USE_ANDROID, test x$android = xtrue)
AM_CONDITIONAL(USE_MAEMO, test x$maemo = xtrue)
AM_CONDITIONAL(USE_SMP, test x$smp = xtrue)
AM_CONDITIONAL(USE_SQL, test x$sql = xtrue)
AM_CONDITIONAL(USE_UPDOWN, test x$updown = xtrue)
AM_CONDITIONAL(USE_DHCP, test x$dhcp = xtrue)
AM_CONDITIONAL(USE_UNIT_TESTS, test x$unit_tests = xtrue)
AM_CONDITIONAL(USE_LOAD_TESTER, test x$load_tester = xtrue)
AM_CONDITIONAL(USE_HA, test x$ha = xtrue)
AM_CONDITIONAL(USE_WHITELIST, test x$whitelist = xtrue)
AM_CONDITIONAL(USE_LED, test x$led = xtrue)
AM_CONDITIONAL(USE_DUPLICHECK, test x$duplicheck = xtrue)
AM_CONDITIONAL(USE_COUPLING, test x$coupling = xtrue)
AM_CONDITIONAL(USE_EAP_SIM, test x$eap_sim = xtrue)
AM_CONDITIONAL(USE_EAP_SIM_FILE, test x$eap_sim_file = xtrue)
AM_CONDITIONAL(USE_EAP_SIM_PCSC, test x$eap_sim_pcsc = xtrue)
AM_CONDITIONAL(USE_EAP_SIMAKA_SQL, test x$eap_simaka_sql = xtrue)
AM_CONDITIONAL(USE_EAP_SIMAKA_PSEUDONYM, test x$eap_simaka_pseudonym = xtrue)
AM_CONDITIONAL(USE_EAP_SIMAKA_REAUTH, test x$eap_simaka_reauth = xtrue)
AM_CONDITIONAL(USE_EAP_IDENTITY, test x$eap_identity = xtrue)
AM_CONDITIONAL(USE_EAP_MD5, test x$eap_md5 = xtrue)
AM_CONDITIONAL(USE_EAP_GTC, test x$eap_gtc = xtrue)
AM_CONDITIONAL(USE_EAP_AKA, test x$eap_aka = xtrue)
AM_CONDITIONAL(USE_EAP_AKA_3GPP2, test x$eap_aka_3gpp2 = xtrue)
AM_CONDITIONAL(USE_EAP_MSCHAPV2, test x$eap_mschapv2 = xtrue)
AM_CONDITIONAL(USE_EAP_TLS, test x$eap_tls = xtrue)
AM_CONDITIONAL(USE_EAP_TTLS, test x$eap_ttls = xtrue)
AM_CONDITIONAL(USE_EAP_PEAP, test x$eap_peap = xtrue)
AM_CONDITIONAL(USE_EAP_TNC, test x$eap_tnc = xtrue)
AM_CONDITIONAL(USE_EAP_RADIUS, test x$eap_radius = xtrue)
AM_CONDITIONAL(USE_TNC_IMC, test x$tnc_imc = xtrue)
AM_CONDITIONAL(USE_TNC_IMV, test x$tnc_imv = xtrue)
AM_CONDITIONAL(USE_TNCCS_11, test x$tnccs_11 = xtrue)
AM_CONDITIONAL(USE_TNCCS_20, test x$tnccs_20 = xtrue)
AM_CONDITIONAL(USE_TNCCS_DYNAMIC, test x$tnccs_dynamic = xtrue)
AM_CONDITIONAL(USE_SOCKET_DEFAULT, test x$socket_default = xtrue)
AM_CONDITIONAL(USE_SOCKET_RAW, test x$socket_raw = xtrue)
AM_CONDITIONAL(USE_SOCKET_DYNAMIC, test x$socket_dynamic = xtrue)
AM_CONDITIONAL(USE_FARP, test x$farp = xtrue)
AM_CONDITIONAL(USE_ADDRBLOCK, test x$addrblock = xtrue)

dnl hydra plugins
dnl =============
AM_CONDITIONAL(USE_ATTR, test x$attr = xtrue)
AM_CONDITIONAL(USE_ATTR_SQL, test x$attr_sql = xtrue -o x$sql = xtrue)
AM_CONDITIONAL(USE_KERNEL_KLIPS, test x$kernel_klips = xtrue)
AM_CONDITIONAL(USE_KERNEL_NETLINK, test x$kernel_netlink = xtrue)
AM_CONDITIONAL(USE_KERNEL_PFKEY, test x$kernel_pfkey = xtrue)
AM_CONDITIONAL(USE_KERNEL_PFROUTE, test x$kernel_pfroute = xtrue)
AM_CONDITIONAL(USE_RESOLVE, test x$resolve = xtrue)

dnl pluto plugins
dnl =============
AM_CONDITIONAL(USE_XAUTH, test x$xauth = xtrue)

dnl other options
dnl =============
AM_CONDITIONAL(USE_SMARTCARD, test x$smartcard = xtrue)
AM_CONDITIONAL(USE_CISCO_QUIRKS, test x$cisco_quirks = xtrue)
AM_CONDITIONAL(USE_LEAK_DETECTIVE, test x$leak_detective = xtrue)
AM_CONDITIONAL(USE_LOCK_PROFILER, test x$lock_profiler = xtrue)
AM_CONDITIONAL(USE_NAT_TRANSPORT, test x$nat_transport = xtrue)
AM_CONDITIONAL(USE_VENDORID, test x$vendor_id = xtrue)
AM_CONDITIONAL(USE_XAUTH_VID, test x$xauth_vid = xtrue)
AM_CONDITIONAL(USE_DUMM, test x$dumm = xtrue)
AM_CONDITIONAL(USE_FAST, test x$fast = xtrue)
AM_CONDITIONAL(USE_MANAGER, test x$manager = xtrue)
AM_CONDITIONAL(USE_ME, test x$mediation = xtrue)
AM_CONDITIONAL(USE_INTEGRITY_TEST, test x$integrity_test = xtrue)
AM_CONDITIONAL(USE_LOAD_WARNING, test x$load_warning = xtrue)
AM_CONDITIONAL(USE_PLUTO, test x$pluto = xtrue)
AM_CONDITIONAL(USE_THREADS, test x$threads = xtrue)
AM_CONDITIONAL(USE_CHARON, test x$charon = xtrue)
AM_CONDITIONAL(USE_TOOLS, test x$tools = xtrue)
AM_CONDITIONAL(USE_SCRIPTS, test x$scripts = xtrue)
AM_CONDITIONAL(USE_CONFTEST, test x$conftest = xtrue)
AM_CONDITIONAL(USE_LIBSTRONGSWAN, test x$charon = xtrue -o x$pluto = xtrue -o x$tools = xtrue -o x$conftest = xtrue)
AM_CONDITIONAL(USE_LIBHYDRA, test x$charon = xtrue -o x$pluto = xtrue)
AM_CONDITIONAL(USE_LIBCHARON, test x$charon = xtrue -o x$conftest = xtrue)
AM_CONDITIONAL(USE_FILE_CONFIG, test x$pluto = xtrue -o x$stroke = xtrue)
AM_CONDITIONAL(USE_IPSEC_SCRIPT, test x$pluto = xtrue -o x$stroke = xtrue -o x$tools = xtrue -o x$conftest = xtrue)
AM_CONDITIONAL(USE_LIBCAP, test x$capabilities = xlibcap)
AM_CONDITIONAL(USE_VSTR, test x$vstr = xtrue)
AM_CONDITIONAL(USE_SIMAKA, test x$simaka = xtrue)
AM_CONDITIONAL(USE_TLS, test x$tls = xtrue)
AM_CONDITIONAL(MONOLITHIC, test x$monolithic = xtrue)

dnl ==============================
dnl  set global definitions
dnl ==============================

if test x$mediation = xtrue; then
	AC_DEFINE(ME)
fi
if test x$capabilities = xlibcap -o x$capabilities = xnative; then
	AC_DEFINE(CAPABILITIES)
fi
if test x$monolithic = xtrue; then
	AC_DEFINE(MONOLITHIC)
fi


dnl ==============================
dnl  build Makefiles
dnl ==============================

AC_OUTPUT(
	Makefile
	man/Makefile
	init/Makefile
	init/systemd/Makefile
	src/Makefile
	src/include/Makefile
	src/libstrongswan/Makefile
	src/libstrongswan/plugins/aes/Makefile
	src/libstrongswan/plugins/des/Makefile
	src/libstrongswan/plugins/blowfish/Makefile
	src/libstrongswan/plugins/md4/Makefile
	src/libstrongswan/plugins/md5/Makefile
	src/libstrongswan/plugins/sha1/Makefile
	src/libstrongswan/plugins/sha2/Makefile
	src/libstrongswan/plugins/fips_prf/Makefile
	src/libstrongswan/plugins/gmp/Makefile
	src/libstrongswan/plugins/random/Makefile
	src/libstrongswan/plugins/hmac/Makefile
	src/libstrongswan/plugins/xcbc/Makefile
	src/libstrongswan/plugins/x509/Makefile
	src/libstrongswan/plugins/revocation/Makefile
	src/libstrongswan/plugins/constraints/Makefile
	src/libstrongswan/plugins/pubkey/Makefile
	src/libstrongswan/plugins/pkcs1/Makefile
	src/libstrongswan/plugins/pgp/Makefile
	src/libstrongswan/plugins/dnskey/Makefile
	src/libstrongswan/plugins/pem/Makefile
	src/libstrongswan/plugins/curl/Makefile
	src/libstrongswan/plugins/soup/Makefile
	src/libstrongswan/plugins/ldap/Makefile
	src/libstrongswan/plugins/mysql/Makefile
	src/libstrongswan/plugins/sqlite/Makefile
	src/libstrongswan/plugins/padlock/Makefile
	src/libstrongswan/plugins/openssl/Makefile
	src/libstrongswan/plugins/gcrypt/Makefile
	src/libstrongswan/plugins/agent/Makefile
	src/libstrongswan/plugins/pkcs11/Makefile
	src/libstrongswan/plugins/ctr/Makefile
	src/libstrongswan/plugins/ccm/Makefile
	src/libstrongswan/plugins/gcm/Makefile
	src/libstrongswan/plugins/af_alg/Makefile
	src/libstrongswan/plugins/test_vectors/Makefile
	src/libhydra/Makefile
	src/libhydra/plugins/attr/Makefile
	src/libhydra/plugins/attr_sql/Makefile
	src/libhydra/plugins/kernel_klips/Makefile
	src/libhydra/plugins/kernel_netlink/Makefile
	src/libhydra/plugins/kernel_pfkey/Makefile
	src/libhydra/plugins/kernel_pfroute/Makefile
	src/libhydra/plugins/resolve/Makefile
	src/libfreeswan/Makefile
	src/libsimaka/Makefile
	src/libtls/Makefile
	src/pluto/Makefile
	src/pluto/plugins/xauth/Makefile
	src/whack/Makefile
	src/charon/Makefile
	src/libcharon/Makefile
	src/libcharon/plugins/eap_aka/Makefile
	src/libcharon/plugins/eap_aka_3gpp2/Makefile
	src/libcharon/plugins/eap_identity/Makefile
	src/libcharon/plugins/eap_md5/Makefile
	src/libcharon/plugins/eap_gtc/Makefile
	src/libcharon/plugins/eap_sim/Makefile
	src/libcharon/plugins/eap_sim_file/Makefile
	src/libcharon/plugins/eap_sim_pcsc/Makefile
	src/libcharon/plugins/eap_simaka_sql/Makefile
	src/libcharon/plugins/eap_simaka_pseudonym/Makefile
	src/libcharon/plugins/eap_simaka_reauth/Makefile
	src/libcharon/plugins/eap_mschapv2/Makefile
	src/libcharon/plugins/eap_tls/Makefile
	src/libcharon/plugins/eap_ttls/Makefile
	src/libcharon/plugins/eap_peap/Makefile
	src/libcharon/plugins/eap_tnc/Makefile
	src/libcharon/plugins/eap_radius/Makefile
	src/libcharon/plugins/tnc_imc/Makefile
	src/libcharon/plugins/tnc_imv/Makefile
	src/libcharon/plugins/tnccs_11/Makefile
	src/libcharon/plugins/tnccs_20/Makefile
	src/libcharon/plugins/tnccs_dynamic/Makefile
	src/libcharon/plugins/socket_default/Makefile
	src/libcharon/plugins/socket_raw/Makefile
	src/libcharon/plugins/socket_dynamic/Makefile
	src/libcharon/plugins/farp/Makefile
	src/libcharon/plugins/smp/Makefile
	src/libcharon/plugins/sql/Makefile
	src/libcharon/plugins/medsrv/Makefile
	src/libcharon/plugins/medcli/Makefile
	src/libcharon/plugins/nm/Makefile
	src/libcharon/plugins/addrblock/Makefile
	src/libcharon/plugins/uci/Makefile
	src/libcharon/plugins/ha/Makefile
	src/libcharon/plugins/whitelist/Makefile
	src/libcharon/plugins/led/Makefile
	src/libcharon/plugins/duplicheck/Makefile
	src/libcharon/plugins/coupling/Makefile
	src/libcharon/plugins/android/Makefile
	src/libcharon/plugins/maemo/Makefile
	src/libcharon/plugins/stroke/Makefile
	src/libcharon/plugins/updown/Makefile
	src/libcharon/plugins/dhcp/Makefile
	src/libcharon/plugins/unit_tester/Makefile
	src/libcharon/plugins/load_tester/Makefile
	src/stroke/Makefile
	src/ipsec/Makefile
	src/starter/Makefile
	src/_updown/Makefile
	src/_updown_espmark/Makefile
	src/_copyright/Makefile
	src/openac/Makefile
	src/scepclient/Makefile
	src/pki/Makefile
	src/dumm/Makefile
	src/dumm/ext/extconf.rb
	src/libfast/Makefile
	src/manager/Makefile
	src/medsrv/Makefile
	src/checksum/Makefile
	src/conftest/Makefile
	scripts/Makefile
	testing/Makefile
)
